# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: circleci/python:3.8.1-buster
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout

      - run:
          name: Install miniconda
          command: |
            sudo apt-get install wget
            wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh;
            chmod +x ~/miniconda.sh;
            bash ~/miniconda.sh -b -p ~/miniconda;
      - run:
          name: Install dependencies
          # This assumes pytest is installed via the install-package step above
          command: |
            pip install -r requirements.txt
      - run:
          name: Generate Cache key
          command: |
            git log -3 -q --pretty=format:"%h-%s" >log.txt
            while IFS= read -r line || [ -n "$line" ]; do
                msg=(${line//-/ })
                echo ${msg[1]}
                if [[ ${msg[1]} == *"[[circle-full-build]]"* ]]; then
                    break
                fi
            done <log.txt
            echo 'cache key is' ${msg[0]}
            echo 'export CACHE_KEY="FOOxxx"' >> "$BASH_ENV"
            echo $CACHE_KEY
            source "$BASH_ENV"

      - run:
          name: "Setup custom environment variables"
          command: echo 'export MY_ENV_VAR="FOO"' >> "$BASH_ENV"

      - restore_cache:
          keys:
            - examples_built
      - run:
          name: Generate output
          # This assumes pytest is installed via the install-package step above
          command: |
            python main.py
            # cat gitlog.txt
            echo $MY_ENV_VAR
            echo $CACHE_KEY

      - save_cache:
          key: examples_built
          paths:
            - output

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
# VS Code Extension Version: 1.4.0
